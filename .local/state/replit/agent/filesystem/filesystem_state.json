{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# StockCéramique - Inventory Management System\n\n## Overview\n\nStockCéramique is a comprehensive inventory management system designed for ceramic spare parts management. The application provides a complete solution for tracking stock levels, managing suppliers, processing purchase requests, handling receptions and outbound shipments, and generating reports. It features a modern web interface built with React and TypeScript, backed by a PostgreSQL database with Drizzle ORM for data persistence.\n\nThe system is specifically tailored for industrial environments where precise inventory control is critical, offering features like low stock alerts, detailed movement tracking, and comprehensive reporting capabilities.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Components**: Shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom Microsoft-inspired design tokens\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for robust form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with TypeScript\n- **Framework**: Express.js for RESTful API endpoints\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Validation**: Zod schemas shared between client and server\n- **Development**: Hot reload with Vite integration\n\n### Data Storage\n- **Primary Database**: PostgreSQL with connection pooling\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Backup Strategy**: Local storage backup functionality with JSON export\n\n### Core Entities and Relationships\n- **Articles**: Spare parts inventory with stock tracking, pricing, and supplier relationships\n- **Suppliers**: Vendor management with contact information and payment terms\n- **Requestors**: Employee/department management for purchase authorization\n- **Purchase Requests**: Workflow for requesting new inventory with approval states\n- **Receptions**: Incoming inventory tracking with delivery validation\n- **Outbounds**: Stock consumption tracking with movement reasons\n- **Stock Movements**: Comprehensive audit trail for all inventory changes\n\n### Authentication and Authorization\nCurrently implements basic session-based approach with plans for role-based access control. The system architecture supports future expansion to include user roles like Administrator, Manager, and Employee with appropriate permission levels.\n\n### API Design\nRESTful API structure with consistent endpoint patterns:\n- CRUD operations for all major entities\n- Specialized endpoints for dashboard statistics and low stock alerts\n- Error handling middleware with structured error responses\n- Request logging for debugging and audit trails\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Connection Management**: `@neondatabase/serverless` for optimized database connections\n\n### UI and Component Libraries\n- **Radix UI**: Comprehensive set of low-level UI primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework for rapid styling\n- **Lucide React**: Modern icon library for consistent iconography\n- **Embla Carousel**: Touch-friendly carousel components\n\n### Development and Build Tools\n- **Vite**: Next-generation frontend build tool with HMR\n- **TypeScript**: Static type checking for both frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Data Management\n- **TanStack Query**: Powerful data synchronization for React applications\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Date-fns**: Modern JavaScript date utility library\n- **Zod**: TypeScript-first schema validation\n\n### Production Considerations\n- **Environment Configuration**: Separate development and production configurations\n- **Static Asset Serving**: Express middleware for serving built React application\n- **Error Monitoring**: Structured error handling with development overlays\n- **Performance**: Optimized bundle splitting and lazy loading capabilities","size_bytes":4506},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        'ms-blue': \"var(--ms-blue)\",\n        'ms-blue-dark': \"var(--ms-blue-dark)\",\n        'ms-light-blue': \"var(--ms-light-blue)\",\n        'ms-green': \"var(--ms-green)\",\n        'ms-amber': \"var(--ms-amber)\",\n        'ms-red': \"var(--ms-red)\",\n        'ms-gray-light': \"var(--ms-gray-light)\",\n        'ms-gray': \"var(--ms-gray)\",\n        'ms-gray-dark': \"var(--ms-gray-dark)\",\n      },\n      fontFamily: {\n        system: [\"var(--font-system)\"],\n        sans: [\"var(--font-system)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2393},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertArticleSchema, insertSupplierSchema, insertRequestorSchema, insertPurchaseRequestSchema, insertReceptionSchema, insertOutboundSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Articles routes\n  app.get(\"/api/articles\", async (req, res) => {\n    try {\n      const articles = await storage.getArticles();\n      res.json(articles);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des articles\" });\n    }\n  });\n\n  app.get(\"/api/articles/:id\", async (req, res) => {\n    try {\n      const article = await storage.getArticle(req.params.id);\n      if (!article) {\n        return res.status(404).json({ message: \"Article non trouvé\" });\n      }\n      res.json(article);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération de l'article\" });\n    }\n  });\n\n  app.post(\"/api/articles\", async (req, res) => {\n    try {\n      const validatedData = insertArticleSchema.parse(req.body);\n      const article = await storage.createArticle(validatedData);\n      res.status(201).json(article);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  app.put(\"/api/articles/:id\", async (req, res) => {\n    try {\n      const article = await storage.updateArticle(req.params.id, req.body);\n      res.json(article);\n    } catch (error) {\n      res.status(400).json({ message: \"Erreur lors de la mise à jour\", error });\n    }\n  });\n\n  app.delete(\"/api/articles/:id\", async (req, res) => {\n    try {\n      await storage.deleteArticle(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la suppression\" });\n    }\n  });\n\n  app.get(\"/api/articles/low-stock\", async (req, res) => {\n    try {\n      const lowStockArticles = await storage.getLowStockArticles();\n      res.json(lowStockArticles);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des articles en stock bas\" });\n    }\n  });\n\n  // Suppliers routes\n  app.get(\"/api/suppliers\", async (req, res) => {\n    try {\n      const suppliers = await storage.getSuppliers();\n      res.json(suppliers);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des fournisseurs\" });\n    }\n  });\n\n  app.post(\"/api/suppliers\", async (req, res) => {\n    try {\n      const validatedData = insertSupplierSchema.parse(req.body);\n      const supplier = await storage.createSupplier(validatedData);\n      res.status(201).json(supplier);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  app.put(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      const supplier = await storage.updateSupplier(req.params.id, req.body);\n      res.json(supplier);\n    } catch (error) {\n      res.status(400).json({ message: \"Erreur lors de la mise à jour\", error });\n    }\n  });\n\n  app.delete(\"/api/suppliers/:id\", async (req, res) => {\n    try {\n      await storage.deleteSupplier(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la suppression\" });\n    }\n  });\n\n  // Requestors routes\n  app.get(\"/api/requestors\", async (req, res) => {\n    try {\n      const requestors = await storage.getRequestors();\n      res.json(requestors);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des demandeurs\" });\n    }\n  });\n\n  app.post(\"/api/requestors\", async (req, res) => {\n    try {\n      const validatedData = insertRequestorSchema.parse(req.body);\n      const requestor = await storage.createRequestor(validatedData);\n      res.status(201).json(requestor);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  app.put(\"/api/requestors/:id\", async (req, res) => {\n    try {\n      const requestor = await storage.updateRequestor(req.params.id, req.body);\n      res.json(requestor);\n    } catch (error) {\n      res.status(400).json({ message: \"Erreur lors de la mise à jour\", error });\n    }\n  });\n\n  app.delete(\"/api/requestors/:id\", async (req, res) => {\n    try {\n      await storage.deleteRequestor(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la suppression\" });\n    }\n  });\n\n  // Purchase Requests routes\n  app.get(\"/api/purchase-requests\", async (req, res) => {\n    try {\n      const requests = await storage.getPurchaseRequests();\n      res.json(requests);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des demandes d'achat\" });\n    }\n  });\n\n  app.post(\"/api/purchase-requests\", async (req, res) => {\n    try {\n      const validatedData = insertPurchaseRequestSchema.parse(req.body);\n      const request = await storage.createPurchaseRequest(validatedData);\n      res.status(201).json(request);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  app.put(\"/api/purchase-requests/:id\", async (req, res) => {\n    try {\n      const request = await storage.updatePurchaseRequest(req.params.id, req.body);\n      res.json(request);\n    } catch (error) {\n      res.status(400).json({ message: \"Erreur lors de la mise à jour\", error });\n    }\n  });\n\n  app.delete(\"/api/purchase-requests/:id\", async (req, res) => {\n    try {\n      await storage.deletePurchaseRequest(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la suppression\" });\n    }\n  });\n\n  // Receptions routes\n  app.get(\"/api/receptions\", async (req, res) => {\n    try {\n      const receptions = await storage.getReceptions();\n      res.json(receptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des réceptions\" });\n    }\n  });\n\n  app.post(\"/api/receptions\", async (req, res) => {\n    try {\n      const validatedData = insertReceptionSchema.parse(req.body);\n      const reception = await storage.createReception(validatedData);\n      res.status(201).json(reception);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  // Outbounds routes\n  app.get(\"/api/outbounds\", async (req, res) => {\n    try {\n      const outbounds = await storage.getOutbounds();\n      res.json(outbounds);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des sorties\" });\n    }\n  });\n\n  app.post(\"/api/outbounds\", async (req, res) => {\n    try {\n      const validatedData = insertOutboundSchema.parse(req.body);\n      const outbound = await storage.createOutbound(validatedData);\n      res.status(201).json(outbound);\n    } catch (error) {\n      res.status(400).json({ message: \"Données invalides\", error });\n    }\n  });\n\n  // Stock movements\n  app.get(\"/api/stock-movements\", async (req, res) => {\n    try {\n      const articleId = req.query.articleId as string;\n      const movements = await storage.getStockMovements(articleId);\n      res.json(movements);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des mouvements\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Erreur lors de la récupération des statistiques\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7799},"server/storage.ts":{"content":"import { \n  type Article, type InsertArticle,\n  type Supplier, type InsertSupplier,\n  type Requestor, type InsertRequestor,\n  type PurchaseRequest, type InsertPurchaseRequest,\n  type Reception, type InsertReception,\n  type Outbound, type InsertOutbound,\n  type StockMovement\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Articles\n  getArticles(): Promise<Article[]>;\n  getArticle(id: string): Promise<Article | undefined>;\n  createArticle(article: InsertArticle): Promise<Article>;\n  updateArticle(id: string, article: Partial<Article>): Promise<Article>;\n  deleteArticle(id: string): Promise<void>;\n  getLowStockArticles(): Promise<Article[]>;\n\n  // Suppliers\n  getSuppliers(): Promise<Supplier[]>;\n  getSupplier(id: string): Promise<Supplier | undefined>;\n  createSupplier(supplier: InsertSupplier): Promise<Supplier>;\n  updateSupplier(id: string, supplier: Partial<Supplier>): Promise<Supplier>;\n  deleteSupplier(id: string): Promise<void>;\n\n  // Requestors\n  getRequestors(): Promise<Requestor[]>;\n  getRequestor(id: string): Promise<Requestor | undefined>;\n  createRequestor(requestor: InsertRequestor): Promise<Requestor>;\n  updateRequestor(id: string, requestor: Partial<Requestor>): Promise<Requestor>;\n  deleteRequestor(id: string): Promise<void>;\n\n  // Purchase Requests\n  getPurchaseRequests(): Promise<PurchaseRequest[]>;\n  getPurchaseRequest(id: string): Promise<PurchaseRequest | undefined>;\n  createPurchaseRequest(request: InsertPurchaseRequest): Promise<PurchaseRequest>;\n  updatePurchaseRequest(id: string, request: Partial<PurchaseRequest>): Promise<PurchaseRequest>;\n  deletePurchaseRequest(id: string): Promise<void>;\n\n  // Receptions\n  getReceptions(): Promise<Reception[]>;\n  getReception(id: string): Promise<Reception | undefined>;\n  createReception(reception: InsertReception): Promise<Reception>;\n  updateReception(id: string, reception: Partial<Reception>): Promise<Reception>;\n  deleteReception(id: string): Promise<void>;\n\n  // Outbounds\n  getOutbounds(): Promise<Outbound[]>;\n  getOutbound(id: string): Promise<Outbound | undefined>;\n  createOutbound(outbound: InsertOutbound): Promise<Outbound>;\n  updateOutbound(id: string, outbound: Partial<Outbound>): Promise<Outbound>;\n  deleteOutbound(id: string): Promise<void>;\n\n  // Stock Movements\n  getStockMovements(articleId?: string): Promise<StockMovement[]>;\n  createStockMovement(movement: Omit<StockMovement, 'id'>): Promise<StockMovement>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<{\n    totalArticles: number;\n    lowStock: number;\n    pendingRequests: number;\n    stockValue: number;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private articles: Map<string, Article> = new Map();\n  private suppliers: Map<string, Supplier> = new Map();\n  private requestors: Map<string, Requestor> = new Map();\n  private purchaseRequests: Map<string, PurchaseRequest> = new Map();\n  private receptions: Map<string, Reception> = new Map();\n  private outbounds: Map<string, Outbound> = new Map();\n  private stockMovements: Map<string, StockMovement> = new Map();\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize with empty data - no mock data\n  }\n\n  // Articles\n  async getArticles(): Promise<Article[]> {\n    return Array.from(this.articles.values());\n  }\n\n  async getArticle(id: string): Promise<Article | undefined> {\n    return this.articles.get(id);\n  }\n\n  async createArticle(article: InsertArticle): Promise<Article> {\n    const id = randomUUID();\n    const newArticle: Article = {\n      ...article,\n      id,\n      stockActuel: article.stockInitial,\n      createdAt: new Date(),\n    };\n    this.articles.set(id, newArticle);\n    return newArticle;\n  }\n\n  async updateArticle(id: string, article: Partial<Article>): Promise<Article> {\n    const existing = this.articles.get(id);\n    if (!existing) {\n      throw new Error(\"Article not found\");\n    }\n    const updated = { ...existing, ...article };\n    this.articles.set(id, updated);\n    return updated;\n  }\n\n  async deleteArticle(id: string): Promise<void> {\n    this.articles.delete(id);\n  }\n\n  async getLowStockArticles(): Promise<Article[]> {\n    return Array.from(this.articles.values()).filter(\n      article => article.stockActuel <= (article.seuilMinimum || 10)\n    );\n  }\n\n  // Suppliers\n  async getSuppliers(): Promise<Supplier[]> {\n    return Array.from(this.suppliers.values());\n  }\n\n  async getSupplier(id: string): Promise<Supplier | undefined> {\n    return this.suppliers.get(id);\n  }\n\n  async createSupplier(supplier: InsertSupplier): Promise<Supplier> {\n    const id = randomUUID();\n    const newSupplier: Supplier = {\n      ...supplier,\n      id,\n      createdAt: new Date(),\n    };\n    this.suppliers.set(id, newSupplier);\n    return newSupplier;\n  }\n\n  async updateSupplier(id: string, supplier: Partial<Supplier>): Promise<Supplier> {\n    const existing = this.suppliers.get(id);\n    if (!existing) {\n      throw new Error(\"Supplier not found\");\n    }\n    const updated = { ...existing, ...supplier };\n    this.suppliers.set(id, updated);\n    return updated;\n  }\n\n  async deleteSupplier(id: string): Promise<void> {\n    this.suppliers.delete(id);\n  }\n\n  // Requestors\n  async getRequestors(): Promise<Requestor[]> {\n    return Array.from(this.requestors.values());\n  }\n\n  async getRequestor(id: string): Promise<Requestor | undefined> {\n    return this.requestors.get(id);\n  }\n\n  async createRequestor(requestor: InsertRequestor): Promise<Requestor> {\n    const id = randomUUID();\n    const newRequestor: Requestor = {\n      ...requestor,\n      id,\n      createdAt: new Date(),\n    };\n    this.requestors.set(id, newRequestor);\n    return newRequestor;\n  }\n\n  async updateRequestor(id: string, requestor: Partial<Requestor>): Promise<Requestor> {\n    const existing = this.requestors.get(id);\n    if (!existing) {\n      throw new Error(\"Requestor not found\");\n    }\n    const updated = { ...existing, ...requestor };\n    this.requestors.set(id, updated);\n    return updated;\n  }\n\n  async deleteRequestor(id: string): Promise<void> {\n    this.requestors.delete(id);\n  }\n\n  // Purchase Requests\n  async getPurchaseRequests(): Promise<PurchaseRequest[]> {\n    return Array.from(this.purchaseRequests.values());\n  }\n\n  async getPurchaseRequest(id: string): Promise<PurchaseRequest | undefined> {\n    return this.purchaseRequests.get(id);\n  }\n\n  async createPurchaseRequest(request: InsertPurchaseRequest): Promise<PurchaseRequest> {\n    const id = randomUUID();\n    const newRequest: PurchaseRequest = {\n      ...request,\n      id,\n      dateInitiation: new Date(),\n      createdAt: new Date(),\n    };\n    this.purchaseRequests.set(id, newRequest);\n    return newRequest;\n  }\n\n  async updatePurchaseRequest(id: string, request: Partial<PurchaseRequest>): Promise<PurchaseRequest> {\n    const existing = this.purchaseRequests.get(id);\n    if (!existing) {\n      throw new Error(\"Purchase request not found\");\n    }\n    const updated = { ...existing, ...request };\n    this.purchaseRequests.set(id, updated);\n    return updated;\n  }\n\n  async deletePurchaseRequest(id: string): Promise<void> {\n    this.purchaseRequests.delete(id);\n  }\n\n  // Receptions\n  async getReceptions(): Promise<Reception[]> {\n    return Array.from(this.receptions.values());\n  }\n\n  async getReception(id: string): Promise<Reception | undefined> {\n    return this.receptions.get(id);\n  }\n\n  async createReception(reception: InsertReception): Promise<Reception> {\n    const id = randomUUID();\n    const newReception: Reception = {\n      ...reception,\n      id,\n      createdAt: new Date(),\n    };\n    this.receptions.set(id, newReception);\n\n    // Update article stock and create movement\n    const article = await this.getArticle(reception.articleId);\n    if (article) {\n      const newStock = article.stockActuel + reception.quantiteRecue;\n      await this.updateArticle(reception.articleId, { stockActuel: newStock });\n      \n      await this.createStockMovement({\n        id: randomUUID(),\n        articleId: reception.articleId,\n        type: \"entree\",\n        quantite: reception.quantiteRecue,\n        quantiteAvant: article.stockActuel,\n        quantiteApres: newStock,\n        reference: id,\n        dateMovement: new Date(),\n        description: `Réception - NBL: ${reception.numeroBonLivraison || 'N/A'}`,\n      });\n    }\n\n    return newReception;\n  }\n\n  async updateReception(id: string, reception: Partial<Reception>): Promise<Reception> {\n    const existing = this.receptions.get(id);\n    if (!existing) {\n      throw new Error(\"Reception not found\");\n    }\n    const updated = { ...existing, ...reception };\n    this.receptions.set(id, updated);\n    return updated;\n  }\n\n  async deleteReception(id: string): Promise<void> {\n    this.receptions.delete(id);\n  }\n\n  // Outbounds\n  async getOutbounds(): Promise<Outbound[]> {\n    return Array.from(this.outbounds.values());\n  }\n\n  async getOutbound(id: string): Promise<Outbound | undefined> {\n    return this.outbounds.get(id);\n  }\n\n  async createOutbound(outbound: InsertOutbound): Promise<Outbound> {\n    const id = randomUUID();\n    const newOutbound: Outbound = {\n      ...outbound,\n      id,\n      createdAt: new Date(),\n    };\n\n    // Check stock availability\n    const article = await this.getArticle(outbound.articleId);\n    if (!article || article.stockActuel < outbound.quantiteSortie) {\n      throw new Error(\"Stock insuffisant\");\n    }\n\n    this.outbounds.set(id, newOutbound);\n\n    // Update article stock and create movement\n    const newStock = article.stockActuel - outbound.quantiteSortie;\n    await this.updateArticle(outbound.articleId, { stockActuel: newStock });\n    \n    await this.createStockMovement({\n      id: randomUUID(),\n      articleId: outbound.articleId,\n      type: \"sortie\",\n      quantite: outbound.quantiteSortie,\n      quantiteAvant: article.stockActuel,\n      quantiteApres: newStock,\n      reference: id,\n      dateMovement: new Date(),\n      description: `Sortie - ${outbound.motifSortie}`,\n    });\n\n    return newOutbound;\n  }\n\n  async updateOutbound(id: string, outbound: Partial<Outbound>): Promise<Outbound> {\n    const existing = this.outbounds.get(id);\n    if (!existing) {\n      throw new Error(\"Outbound not found\");\n    }\n    const updated = { ...existing, ...outbound };\n    this.outbounds.set(id, updated);\n    return updated;\n  }\n\n  async deleteOutbound(id: string): Promise<void> {\n    this.outbounds.delete(id);\n  }\n\n  // Stock Movements\n  async getStockMovements(articleId?: string): Promise<StockMovement[]> {\n    const movements = Array.from(this.stockMovements.values());\n    if (articleId) {\n      return movements.filter(m => m.articleId === articleId);\n    }\n    return movements;\n  }\n\n  async createStockMovement(movement: Omit<StockMovement, 'id'>): Promise<StockMovement> {\n    const id = randomUUID();\n    const newMovement: StockMovement = { ...movement, id };\n    this.stockMovements.set(id, newMovement);\n    return newMovement;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<{\n    totalArticles: number;\n    lowStock: number;\n    pendingRequests: number;\n    stockValue: number;\n  }> {\n    const articles = await this.getArticles();\n    const lowStockArticles = await this.getLowStockArticles();\n    const purchaseRequests = await this.getPurchaseRequests();\n    \n    const pendingRequests = purchaseRequests.filter(req => req.statut === \"en_attente\").length;\n    \n    const stockValue = articles.reduce((total, article) => {\n      const price = parseFloat(article.prixUnitaire || \"0\");\n      return total + (price * article.stockActuel);\n    }, 0);\n\n    return {\n      totalArticles: articles.length,\n      lowStock: lowStockArticles.length,\n      pendingRequests,\n      stockValue,\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":11822},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, varchar, integer, decimal, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Articles (Spare Parts)\nexport const articles = pgTable(\"articles\", {\n  id: varchar(\"id\").primaryKey(),\n  codeArticle: text(\"code_article\").notNull().unique(),\n  designation: text(\"designation\").notNull(),\n  categorie: text(\"categorie\").notNull(),\n  marque: text(\"marque\"),\n  reference: text(\"reference\"),\n  stockInitial: integer(\"stock_initial\").notNull().default(0),\n  stockActuel: integer(\"stock_actuel\").notNull().default(0),\n  unite: text(\"unite\").notNull().default(\"pcs\"),\n  prixUnitaire: decimal(\"prix_unitaire\", { precision: 10, scale: 2 }),\n  seuilMinimum: integer(\"seuil_minimum\").default(10),\n  fournisseurId: varchar(\"fournisseur_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Suppliers\nexport const suppliers = pgTable(\"suppliers\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull(),\n  contact: text(\"contact\"),\n  telephone: text(\"telephone\"),\n  email: text(\"email\"),\n  adresse: text(\"adresse\"),\n  conditionsPaiement: text(\"conditions_paiement\"),\n  delaiLivraison: integer(\"delai_livraison\"), // in days\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Requestors\nexport const requestors = pgTable(\"requestors\", {\n  id: varchar(\"id\").primaryKey(),\n  nom: text(\"nom\").notNull(),\n  prenom: text(\"prenom\").notNull(),\n  departement: text(\"departement\").notNull(),\n  poste: text(\"poste\"),\n  email: text(\"email\"),\n  telephone: text(\"telephone\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Purchase Requests\nexport const purchaseRequests = pgTable(\"purchase_requests\", {\n  id: varchar(\"id\").primaryKey(),\n  dateDemande: timestamp(\"date_demande\").notNull().defaultNow(),\n  requestorId: varchar(\"requestor_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteDemandee: integer(\"quantite_demandee\").notNull(),\n  dateInitiation: timestamp(\"date_initiation\").defaultNow(),\n  observations: text(\"observations\"),\n  statut: text(\"statut\").notNull().default(\"en_attente\"), // en_attente, approuve, refuse, commande\n  supplierId: varchar(\"supplier_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Goods Reception\nexport const receptions = pgTable(\"receptions\", {\n  id: varchar(\"id\").primaryKey(),\n  dateReception: timestamp(\"date_reception\").notNull().defaultNow(),\n  supplierId: varchar(\"supplier_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteRecue: integer(\"quantite_recue\").notNull(),\n  prixUnitaire: decimal(\"prix_unitaire\", { precision: 10, scale: 2 }),\n  numeroBonLivraison: text(\"numero_bon_livraison\"),\n  observations: text(\"observations\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Stock Outbound\nexport const outbounds = pgTable(\"outbounds\", {\n  id: varchar(\"id\").primaryKey(),\n  dateSortie: timestamp(\"date_sortie\").notNull().defaultNow(),\n  requestorId: varchar(\"requestor_id\").notNull(),\n  articleId: varchar(\"article_id\").notNull(),\n  quantiteSortie: integer(\"quantite_sortie\").notNull(),\n  motifSortie: text(\"motif_sortie\").notNull(),\n  observations: text(\"observations\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Stock Movements (for history tracking)\nexport const stockMovements = pgTable(\"stock_movements\", {\n  id: varchar(\"id\").primaryKey(),\n  articleId: varchar(\"article_id\").notNull(),\n  type: text(\"type\").notNull(), // entree, sortie\n  quantite: integer(\"quantite\").notNull(),\n  quantiteAvant: integer(\"quantite_avant\").notNull(),\n  quantiteApres: integer(\"quantite_apres\").notNull(),\n  reference: text(\"reference\"), // Reference to reception/outbound ID\n  dateMovement: timestamp(\"date_movement\").notNull().defaultNow(),\n  description: text(\"description\"),\n});\n\n// Insert schemas\nexport const insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n  stockActuel: true,\n});\n\nexport const insertSupplierSchema = createInsertSchema(suppliers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRequestorSchema = createInsertSchema(requestors).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPurchaseRequestSchema = createInsertSchema(purchaseRequests).omit({\n  id: true,\n  createdAt: true,\n  dateInitiation: true,\n});\n\nexport const insertReceptionSchema = createInsertSchema(receptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOutboundSchema = createInsertSchema(outbounds).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Article = typeof articles.$inferSelect;\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\n\nexport type Supplier = typeof suppliers.$inferSelect;\nexport type InsertSupplier = z.infer<typeof insertSupplierSchema>;\n\nexport type Requestor = typeof requestors.$inferSelect;\nexport type InsertRequestor = z.infer<typeof insertRequestorSchema>;\n\nexport type PurchaseRequest = typeof purchaseRequests.$inferSelect;\nexport type InsertPurchaseRequest = z.infer<typeof insertPurchaseRequestSchema>;\n\nexport type Reception = typeof receptions.$inferSelect;\nexport type InsertReception = z.infer<typeof insertReceptionSchema>;\n\nexport type Outbound = typeof outbounds.$inferSelect;\nexport type InsertOutbound = z.infer<typeof insertOutboundSchema>;\n\nexport type StockMovement = typeof stockMovements.$inferSelect;\n","size_bytes":5375},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Articles from \"@/pages/Articles\";\nimport Suppliers from \"@/pages/Suppliers\";\nimport Requestors from \"@/pages/Requestors\";\nimport PurchaseRequests from \"@/pages/PurchaseRequests\";\nimport Reception from \"@/pages/Reception\";\nimport Outbound from \"@/pages/Outbound\";\nimport Reports from \"@/pages/Reports\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/articles\" component={Articles} />\n        <Route path=\"/suppliers\" component={Suppliers} />\n        <Route path=\"/requestors\" component={Requestors} />\n        <Route path=\"/purchase-requests\" component={PurchaseRequests} />\n        <Route path=\"/reception\" component={Reception} />\n        <Route path=\"/outbound\" component={Outbound} />\n        <Route path=\"/reports\" component={Reports} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1573},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 20%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 20%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 20%);\n  --primary: hsl(207 100% 42%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 5% 95%);\n  --secondary-foreground: hsl(0 0% 20%);\n  --muted: hsl(217 5% 95%);\n  --muted-foreground: hsl(215 7% 36%);\n  --accent: hsl(217 5% 95%);\n  --accent-foreground: hsl(207 100% 42%);\n  --destructive: hsl(0 73% 41%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 10% 90%);\n  --input: hsl(217 10% 97%);\n  --ring: hsl(207 100% 42%);\n  --radius: 0.5rem;\n  \n  /* Microsoft-style colors */\n  --ms-blue: hsl(207 100% 42%);\n  --ms-blue-dark: hsl(212 79% 39%);\n  --ms-light-blue: hsl(192 100% 47%);\n  --ms-green: hsl(109 58% 40%);\n  --ms-amber: hsl(45 100% 49%);\n  --ms-red: hsl(354 70% 54%);\n  --ms-gray-light: hsl(40 6% 95%);\n  --ms-gray: hsl(40 4% 38%);\n  --ms-gray-dark: hsl(40 4% 20%);\n  \n  --font-system: \"Segoe UI\", system-ui, -apple-system, BlinkMacSystemFont, sans-serif;\n}\n\n.dark {\n  --background: hsl(0 0% 4%);\n  --foreground: hsl(0 0% 95%);\n  --card: hsl(0 0% 8%);\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(0 0% 4%);\n  --popover-foreground: hsl(0 0% 95%);\n  --primary: hsl(207 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217 5% 14%);\n  --secondary-foreground: hsl(0 0% 95%);\n  --muted: hsl(217 5% 14%);\n  --muted-foreground: hsl(215 7% 64%);\n  --accent: hsl(217 5% 14%);\n  --accent-foreground: hsl(207 100% 50%);\n  --destructive: hsl(0 73% 41%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(217 10% 18%);\n  --input: hsl(217 10% 14%);\n  --ring: hsl(207 100% 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n    font-family: var(--font-system);\n  }\n}\n\n@layer components {\n  .sidebar-item {\n    @apply transition-all duration-200 ease-in-out;\n  }\n  \n  .sidebar-item:hover {\n    @apply bg-muted;\n  }\n  \n  .sidebar-item.active {\n    @apply bg-primary text-primary-foreground;\n  }\n  \n  .card-hover {\n    @apply transition-all duration-200 ease-in-out;\n  }\n  \n  .card-hover:hover {\n    @apply shadow-lg transform -translate-y-0.5;\n  }\n  \n  .btn-ms-blue {\n    @apply bg-[var(--ms-blue)] hover:bg-[var(--ms-blue-dark)] text-white;\n  }\n  \n  .btn-ms-green {\n    @apply bg-[var(--ms-green)] hover:bg-green-700 text-white;\n  }\n  \n  .btn-ms-amber {\n    @apply bg-[var(--ms-amber)] hover:bg-yellow-600 text-white;\n  }\n  \n  .btn-ms-red {\n    @apply bg-[var(--ms-red)] hover:bg-red-700 text-white;\n  }\n  \n  .text-ms-gray {\n    color: var(--ms-gray);\n  }\n  \n  .text-ms-gray-dark {\n    color: var(--ms-gray-dark);\n  }\n  \n  .bg-ms-gray-light {\n    background-color: var(--ms-gray-light);\n  }\n}\n","size_bytes":2985},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/ArticleForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertArticleSchema, type Article, type InsertArticle } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ArticleFormProps {\n  article?: Article | null;\n  onClose: () => void;\n}\n\nconst categories = [\n  \"Joints\",\n  \"Électrique\",\n  \"Régulation\",\n  \"Mécanique\",\n  \"Thermique\",\n  \"Filtration\",\n  \"Autre\"\n];\n\nconst unites = [\"pcs\", \"kg\", \"m\", \"L\", \"m²\", \"m³\"];\n\nexport default function ArticleForm({ article, onClose }: ArticleFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!article;\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const form = useForm<InsertArticle>({\n    resolver: zodResolver(insertArticleSchema),\n    defaultValues: {\n      codeArticle: article?.codeArticle || \"\",\n      designation: article?.designation || \"\",\n      categorie: article?.categorie || \"\",\n      marque: article?.marque || \"\",\n      reference: article?.reference || \"\",\n      stockInitial: article?.stockInitial || 0,\n      unite: article?.unite || \"pcs\",\n      prixUnitaire: article?.prixUnitaire || null,\n      seuilMinimum: article?.seuilMinimum || 10,\n      fournisseurId: article?.fournisseurId || null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertArticle) => apiRequest(\"POST\", \"/api/articles\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Article créé\",\n        description: \"L'article a été créé avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer l'article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<Article>) => apiRequest(\"PUT\", `/api/articles/${article!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Article modifié\",\n        description: \"L'article a été modifié avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier l'article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertArticle) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"article-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Modifier l'Article\" : \"Nouvel Article\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"codeArticle\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Code Article *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ex: JE-205\" \n                        {...field} \n                        data-testid=\"input-code-article\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"reference\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Référence</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Référence fournisseur\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-reference\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"designation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Désignation *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: Joint étanchéité diamètre 20.5mm\" \n                      {...field} \n                      data-testid=\"input-designation\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"categorie\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Catégorie *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Sélectionner une catégorie\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories.map(category => (\n                          <SelectItem key={category} value={category}>{category}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"marque\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Marque</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Marque du produit\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-marque\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"stockInitial\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Initial *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"0\"\n                        {...field} \n                        onChange={e => field.onChange(parseInt(e.target.value) || 0)}\n                        data-testid=\"input-stock-initial\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"unite\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Unité</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-unite\">\n                          <SelectValue />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {unites.map(unite => (\n                          <SelectItem key={unite} value={unite}>{unite}</SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"seuilMinimum\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Seuil Minimum</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"0\"\n                        {...field} \n                        onChange={e => field.onChange(parseInt(e.target.value) || 10)}\n                        data-testid=\"input-seuil-minimum\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"prixUnitaire\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prix Unitaire (€)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        min=\"0\"\n                        {...field} \n                        value={field.value || \"\"}\n                        onChange={e => field.onChange(e.target.value ? parseFloat(e.target.value) : null)}\n                        data-testid=\"input-prix-unitaire\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"fournisseurId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fournisseur Principal</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-fournisseur\">\n                          <SelectValue placeholder=\"Sélectionner un fournisseur\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">Aucun fournisseur</SelectItem>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier.id} value={supplier.id}>\n                            {supplier.nom}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"btn-ms-blue\"\n                disabled={isPending}\n                data-testid=\"button-save\"\n              >\n                {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12517},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport TopBar from \"./TopBar\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [activeModule, setActiveModule] = useState(\"dashboard\");\n\n  return (\n    <div className=\"flex h-screen overflow-hidden bg-gray-50\" data-testid=\"main-layout\">\n      <Sidebar activeModule={activeModule} setActiveModule={setActiveModule} />\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <TopBar activeModule={activeModule} />\n        <main className=\"flex-1 overflow-y-auto p-6\" data-testid=\"main-content\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":718},"client/src/components/OutboundForm.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertOutboundSchema, type Outbound, type InsertOutbound } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface OutboundFormProps {\n  outbound?: Outbound | null;\n  onClose: () => void;\n}\n\nconst motifOptions = [\n  \"Maintenance\",\n  \"Réparation\",\n  \"Installation\",\n  \"Remplacement\",\n  \"Retour client\",\n  \"Perte/Casse\",\n  \"Test qualité\",\n  \"Formation\",\n  \"Autre\"\n];\n\nexport default function OutboundForm({ outbound, onClose }: OutboundFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!outbound;\n  const isViewOnly = isEditing; // Outbounds are typically view-only once created\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: requestors = [] } = useQuery({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const form = useForm<InsertOutbound>({\n    resolver: zodResolver(insertOutboundSchema),\n    defaultValues: {\n      dateSortie: outbound?.dateSortie || new Date(),\n      requestorId: outbound?.requestorId || \"\",\n      articleId: outbound?.articleId || \"\",\n      quantiteSortie: outbound?.quantiteSortie || 1,\n      motifSortie: outbound?.motifSortie || \"\",\n      observations: outbound?.observations || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertOutbound) => apiRequest(\"POST\", \"/api/outbounds\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/outbounds\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sortie enregistrée\",\n        description: \"La sortie a été enregistrée et le stock mis à jour\",\n      });\n      onClose();\n    },\n    onError: (error: any) => {\n      const message = error.message || \"Impossible d'enregistrer la sortie\";\n      toast({\n        title: \"Erreur\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertOutbound) => {\n    if (!isViewOnly) {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending;\n\n  // Get available stock for selected article\n  const selectedArticle = articles.find((a: any) => a.id === form.watch(\"articleId\"));\n  const availableStock = selectedArticle?.stockActuel || 0;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"outbound-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isViewOnly ? \"Détails de la Sortie\" : \"Nouvelle Sortie de Stock\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"requestorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Demandeur *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} disabled={isViewOnly}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-requestor\">\n                          <SelectValue placeholder=\"Sélectionner un demandeur\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {requestors.map((requestor: any) => (\n                          <SelectItem key={requestor.id} value={requestor.id}>\n                            {requestor.nom} {requestor.prenom} - {requestor.departement}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"articleId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Article *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} disabled={isViewOnly}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-article\">\n                          <SelectValue placeholder=\"Sélectionner un article\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {articles.map((article: any) => (\n                          <SelectItem key={article.id} value={article.id}>\n                            {article.codeArticle} - {article.designation} (Stock: {article.stockActuel})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"quantiteSortie\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantité sortie *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        max={isViewOnly ? undefined : availableStock}\n                        {...field} \n                        onChange={e => field.onChange(parseInt(e.target.value) || 1)}\n                        disabled={isViewOnly}\n                        data-testid=\"input-quantite\"\n                      />\n                    </FormControl>\n                    {!isViewOnly && selectedArticle && (\n                      <p className=\"text-xs text-ms-gray\">\n                        Stock disponible: {availableStock} {selectedArticle.unite}\n                      </p>\n                    )}\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"motifSortie\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Motif de sortie *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ex: Maintenance\" \n                        {...field} \n                        list=\"motifs\"\n                        disabled={isViewOnly}\n                        data-testid=\"input-motif\"\n                      />\n                    </FormControl>\n                    <datalist id=\"motifs\">\n                      {motifOptions.map(motif => (\n                        <option key={motif} value={motif} />\n                      ))}\n                    </datalist>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"observations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observations</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Détails sur l'utilisation, destination...\" \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      disabled={isViewOnly}\n                      data-testid=\"input-observations\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-close\"\n              >\n                {isViewOnly ? \"Fermer\" : \"Annuler\"}\n              </Button>\n              {!isViewOnly && (\n                <Button \n                  type=\"submit\" \n                  className=\"btn-ms-blue\"\n                  disabled={isPending}\n                  data-testid=\"button-save\"\n                >\n                  {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9424},"client/src/components/PurchaseRequestForm.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertPurchaseRequestSchema, type PurchaseRequest, type InsertPurchaseRequest } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PurchaseRequestFormProps {\n  request?: PurchaseRequest | null;\n  onClose: () => void;\n}\n\nexport default function PurchaseRequestForm({ request, onClose }: PurchaseRequestFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!request;\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: requestors = [] } = useQuery({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const form = useForm<InsertPurchaseRequest>({\n    resolver: zodResolver(insertPurchaseRequestSchema),\n    defaultValues: {\n      dateDemande: request?.dateDemande || new Date(),\n      requestorId: request?.requestorId || \"\",\n      articleId: request?.articleId || \"\",\n      quantiteDemandee: request?.quantiteDemandee || 1,\n      observations: request?.observations || \"\",\n      statut: request?.statut || \"en_attente\",\n      supplierId: request?.supplierId || null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertPurchaseRequest) => apiRequest(\"POST\", \"/api/purchase-requests\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Demande créée\",\n        description: \"La demande d'achat a été créée avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer la demande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<PurchaseRequest>) => apiRequest(\"PUT\", `/api/purchase-requests/${request!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Demande modifiée\",\n        description: \"La demande d'achat a été modifiée avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier la demande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertPurchaseRequest) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"purchase-request-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Modifier la Demande\" : \"Nouvelle Demande d'Achat\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"requestorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Demandeur *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-requestor\">\n                          <SelectValue placeholder=\"Sélectionner un demandeur\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {requestors.map((requestor: any) => (\n                          <SelectItem key={requestor.id} value={requestor.id}>\n                            {requestor.nom} {requestor.prenom} - {requestor.departement}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"articleId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Article *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-article\">\n                          <SelectValue placeholder=\"Sélectionner un article\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {articles.map((article: any) => (\n                          <SelectItem key={article.id} value={article.id}>\n                            {article.codeArticle} - {article.designation}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"quantiteDemandee\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantité demandée *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field} \n                        onChange={e => field.onChange(parseInt(e.target.value) || 1)}\n                        data-testid=\"input-quantite\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"supplierId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fournisseur suggéré</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-supplier\">\n                          <SelectValue placeholder=\"Sélectionner un fournisseur\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"\">Aucun fournisseur</SelectItem>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier.id} value={supplier.id}>\n                            {supplier.nom}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"observations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observations</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Commentaires, urgence, spécifications...\" \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      data-testid=\"input-observations\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"btn-ms-blue\"\n                disabled={isPending}\n                data-testid=\"button-save\"\n              >\n                {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9378},"client/src/components/ReceptionForm.tsx":{"content":"import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertReceptionSchema, type Reception, type InsertReception } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ReceptionFormProps {\n  reception?: Reception | null;\n  onClose: () => void;\n}\n\nexport default function ReceptionForm({ reception, onClose }: ReceptionFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!reception;\n  const isViewOnly = isEditing; // Receptions are typically view-only once created\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const form = useForm<InsertReception>({\n    resolver: zodResolver(insertReceptionSchema),\n    defaultValues: {\n      dateReception: reception?.dateReception || new Date(),\n      supplierId: reception?.supplierId || \"\",\n      articleId: reception?.articleId || \"\",\n      quantiteRecue: reception?.quantiteRecue || 1,\n      prixUnitaire: reception?.prixUnitaire || null,\n      numeroBonLivraison: reception?.numeroBonLivraison || \"\",\n      observations: reception?.observations || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertReception) => apiRequest(\"POST\", \"/api/receptions\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/receptions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/stock-movements\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Réception enregistrée\",\n        description: \"La réception a été enregistrée et le stock mis à jour\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'enregistrer la réception\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertReception) => {\n    if (!isViewOnly) {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"reception-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isViewOnly ? \"Détails de la Réception\" : \"Nouvelle Réception\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"supplierId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Fournisseur *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} disabled={isViewOnly}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-supplier\">\n                          <SelectValue placeholder=\"Sélectionner un fournisseur\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {suppliers.map((supplier: any) => (\n                          <SelectItem key={supplier.id} value={supplier.id}>\n                            {supplier.nom}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"articleId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Article *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value} disabled={isViewOnly}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-article\">\n                          <SelectValue placeholder=\"Sélectionner un article\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {articles.map((article: any) => (\n                          <SelectItem key={article.id} value={article.id}>\n                            {article.codeArticle} - {article.designation}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"quantiteRecue\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Quantité reçue *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1\"\n                        {...field} \n                        onChange={e => field.onChange(parseInt(e.target.value) || 1)}\n                        disabled={isViewOnly}\n                        data-testid=\"input-quantite\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"prixUnitaire\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prix unitaire (€)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.01\" \n                        min=\"0\"\n                        {...field} \n                        value={field.value || \"\"}\n                        onChange={e => field.onChange(e.target.value ? parseFloat(e.target.value) : null)}\n                        disabled={isViewOnly}\n                        data-testid=\"input-prix-unitaire\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"numeroBonLivraison\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>N° Bon de Livraison</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"BL-2024-001\" \n                        {...field} \n                        value={field.value || \"\"}\n                        disabled={isViewOnly}\n                        data-testid=\"input-bon-livraison\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"observations\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Observations</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"État des marchandises, conformité...\" \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      disabled={isViewOnly}\n                      data-testid=\"input-observations\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-close\"\n              >\n                {isViewOnly ? \"Fermer\" : \"Annuler\"}\n              </Button>\n              {!isViewOnly && (\n                <Button \n                  type=\"submit\" \n                  className=\"btn-ms-blue\"\n                  disabled={isPending}\n                  data-testid=\"button-save\"\n                >\n                  {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9371},"client/src/components/RequestorForm.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertRequestorSchema, type Requestor, type InsertRequestor } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface RequestorFormProps {\n  requestor?: Requestor | null;\n  onClose: () => void;\n}\n\nconst departements = [\n  \"Production\",\n  \"Maintenance\",\n  \"Qualité\",\n  \"Logistique\",\n  \"Administration\",\n  \"Service Technique\",\n  \"Commercial\",\n  \"Achats\",\n  \"Direction\",\n  \"Autre\"\n];\n\nexport default function RequestorForm({ requestor, onClose }: RequestorFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!requestor;\n\n  const form = useForm<InsertRequestor>({\n    resolver: zodResolver(insertRequestorSchema),\n    defaultValues: {\n      nom: requestor?.nom || \"\",\n      prenom: requestor?.prenom || \"\",\n      departement: requestor?.departement || \"\",\n      poste: requestor?.poste || \"\",\n      email: requestor?.email || \"\",\n      telephone: requestor?.telephone || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertRequestor) => apiRequest(\"POST\", \"/api/requestors\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/requestors\"] });\n      toast({\n        title: \"Demandeur créé\",\n        description: \"Le demandeur a été créé avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le demandeur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<Requestor>) => apiRequest(\"PUT\", `/api/requestors/${requestor!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/requestors\"] });\n      toast({\n        title: \"Demandeur modifié\",\n        description: \"Le demandeur a été modifié avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le demandeur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertRequestor) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"requestor-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Modifier le Demandeur\" : \"Nouveau Demandeur\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"nom\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Nom *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Nom de famille\" \n                        {...field} \n                        data-testid=\"input-nom\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"prenom\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Prénom *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Prénom\" \n                        {...field} \n                        data-testid=\"input-prenom\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"departement\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Département *</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Département ou service\" \n                        {...field} \n                        data-testid=\"input-departement\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"poste\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Poste</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Fonction ou poste\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-poste\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"email\"\n                        placeholder=\"email@entreprise.com\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"telephone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Téléphone</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"0123456789\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-telephone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"btn-ms-blue\"\n                disabled={isPending}\n                data-testid=\"button-save\"\n              >\n                {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7919},"client/src/components/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\n\ninterface SidebarProps {\n  activeModule: string;\n  setActiveModule: (module: string) => void;\n}\n\nconst menuItems = [\n  { id: \"dashboard\", path: \"/\", icon: \"fas fa-tachometer-alt\", label: \"Tableau de Bord\" },\n  { id: \"articles\", path: \"/articles\", icon: \"fas fa-cogs\", label: \"Articles\" },\n  { id: \"purchase-requests\", path: \"/purchase-requests\", icon: \"fas fa-shopping-cart\", label: \"Demandes d'Achat\" },\n  { id: \"reception\", path: \"/reception\", icon: \"fas fa-truck\", label: \"Réception\" },\n  { id: \"outbound\", path: \"/outbound\", icon: \"fas fa-sign-out-alt\", label: \"Sortie de Stock\" },\n  { id: \"suppliers\", path: \"/suppliers\", icon: \"fas fa-building\", label: \"Fournisseurs\" },\n  { id: \"requestors\", path: \"/requestors\", icon: \"fas fa-users\", label: \"Demandeurs\" },\n];\n\nconst secondaryItems = [\n  { id: \"reports\", path: \"/reports\", icon: \"fas fa-chart-line\", label: \"Rapports\" },\n];\n\nexport default function Sidebar({ activeModule, setActiveModule }: SidebarProps) {\n  const [location] = useLocation();\n\n  const isActive = (path: string) => {\n    if (path === \"/\" && (location === \"/\" || location === \"/dashboard\")) return true;\n    return location === path;\n  };\n\n  return (\n    <div className=\"w-64 bg-white shadow-lg flex flex-col\" data-testid=\"sidebar\">\n      {/* Logo/Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-10 h-10 bg-ms-blue rounded-lg flex items-center justify-center\">\n            <i className=\"fas fa-boxes text-white text-lg\"></i>\n          </div>\n          <div>\n            <h1 className=\"text-lg font-semibold text-ms-gray-dark\">StockCéramique</h1>\n            <p className=\"text-xs text-ms-gray\">Gestion de Stock</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 p-4 space-y-2\" data-testid=\"navigation-menu\">\n        {menuItems.map((item) => (\n          <Link\n            key={item.id}\n            href={item.path}\n            className={`sidebar-item px-3 py-2 rounded-lg cursor-pointer transition-smooth flex items-center space-x-3 ${\n              isActive(item.path) ? 'active' : ''\n            }`}\n            onClick={() => setActiveModule(item.id)}\n            data-testid={`nav-${item.id}`}\n          >\n            <i className={`${item.icon} w-5 ${isActive(item.path) ? 'text-white' : 'text-ms-gray'}`}></i>\n            <span className={`text-sm font-medium ${isActive(item.path) ? 'text-white' : 'text-ms-gray-dark'}`}>\n              {item.label}\n            </span>\n          </Link>\n        ))}\n        \n        <hr className=\"my-4 border-gray-200\" />\n        \n        {secondaryItems.map((item) => (\n          <Link\n            key={item.id}\n            href={item.path}\n            className={`sidebar-item px-3 py-2 rounded-lg cursor-pointer transition-smooth flex items-center space-x-3 ${\n              isActive(item.path) ? 'active' : ''\n            }`}\n            onClick={() => setActiveModule(item.id)}\n            data-testid={`nav-${item.id}`}\n          >\n            <i className={`${item.icon} w-5 ${isActive(item.path) ? 'text-white' : 'text-ms-gray'}`}></i>\n            <span className={`text-sm font-medium ${isActive(item.path) ? 'text-white' : 'text-ms-gray-dark'}`}>\n              {item.label}\n            </span>\n          </Link>\n        ))}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <div className=\"flex items-center space-x-2 text-xs text-ms-gray\">\n          <div className=\"w-2 h-2 bg-ms-green rounded-full\"></div>\n          <span>Mode Hors Ligne</span>\n        </div>\n        <div className=\"text-xs text-ms-gray mt-1\">Version 1.0.0</div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3788},"client/src/components/SupplierForm.tsx":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertSupplierSchema, type Supplier, type InsertSupplier } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface SupplierFormProps {\n  supplier?: Supplier | null;\n  onClose: () => void;\n}\n\nexport default function SupplierForm({ supplier, onClose }: SupplierFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!supplier;\n\n  const form = useForm<InsertSupplier>({\n    resolver: zodResolver(insertSupplierSchema),\n    defaultValues: {\n      nom: supplier?.nom || \"\",\n      contact: supplier?.contact || \"\",\n      telephone: supplier?.telephone || \"\",\n      email: supplier?.email || \"\",\n      adresse: supplier?.adresse || \"\",\n      conditionsPaiement: supplier?.conditionsPaiement || \"\",\n      delaiLivraison: supplier?.delaiLivraison || null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: InsertSupplier) => apiRequest(\"POST\", \"/api/suppliers\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({\n        title: \"Fournisseur créé\",\n        description: \"Le fournisseur a été créé avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de créer le fournisseur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<Supplier>) => apiRequest(\"PUT\", `/api/suppliers/${supplier!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({\n        title: \"Fournisseur modifié\",\n        description: \"Le fournisseur a été modifié avec succès\",\n      });\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier le fournisseur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertSupplier) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isPending = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Dialog open={true} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"supplier-form-modal\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEditing ? \"Modifier le Fournisseur\" : \"Nouveau Fournisseur\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <FormField\n              control={form.control}\n              name=\"nom\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Nom de l'entreprise *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Ex: CéramiTech SAS\" \n                      {...field} \n                      data-testid=\"input-nom\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"contact\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personne de contact</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Nom du contact\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-contact\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"telephone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Téléphone</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"0123456789\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-telephone\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email</FormLabel>\n                  <FormControl>\n                    <Input \n                      type=\"email\"\n                      placeholder=\"contact@entreprise.com\" \n                      {...field} \n                      value={field.value || \"\"}\n                      data-testid=\"input-email\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"adresse\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Adresse</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Adresse complète\" \n                      {...field} \n                      value={field.value || \"\"}\n                      rows={3}\n                      data-testid=\"input-adresse\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <FormField\n                control={form.control}\n                name=\"conditionsPaiement\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Conditions de paiement</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Ex: 30 jours net\" \n                        {...field} \n                        value={field.value || \"\"}\n                        data-testid=\"input-conditions-paiement\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"delaiLivraison\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Délai de livraison (jours)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"0\"\n                        placeholder=\"Ex: 7\" \n                        {...field} \n                        value={field.value || \"\"}\n                        onChange={e => field.onChange(e.target.value ? parseInt(e.target.value) : null)}\n                        data-testid=\"input-delai-livraison\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-4 pt-6 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={onClose}\n                data-testid=\"button-cancel\"\n              >\n                Annuler\n              </Button>\n              <Button \n                type=\"submit\" \n                className=\"btn-ms-blue\"\n                disabled={isPending}\n                data-testid=\"button-save\"\n              >\n                {isPending ? \"Enregistrement...\" : \"Enregistrer\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8692},"client/src/components/TopBar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useLocalStorageBackup } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface TopBarProps {\n  activeModule: string;\n}\n\nconst moduleLabels: Record<string, { title: string; description: string }> = {\n  dashboard: { title: \"Tableau de Bord\", description: \"Vue d'ensemble de votre stock\" },\n  articles: { title: \"Gestion des Articles\", description: \"Pièces de rechange céramiques\" },\n  suppliers: { title: \"Gestion des Fournisseurs\", description: \"Base de données fournisseurs\" },\n  requestors: { title: \"Gestion des Demandeurs\", description: \"Personnel et départements\" },\n  \"purchase-requests\": { title: \"Demandes d'Achat\", description: \"Suivi des demandes\" },\n  reception: { title: \"Réception de Marchandises\", description: \"Enregistrement des livraisons\" },\n  outbound: { title: \"Sortie de Stock\", description: \"Gestion des sorties\" },\n  reports: { title: \"Rapports et Analyses\", description: \"Statistiques et exports\" },\n};\n\nexport default function TopBar({ activeModule }: TopBarProps) {\n  const { exportData } = useLocalStorageBackup();\n  const { toast } = useToast();\n  const currentDate = new Date().toLocaleDateString('fr-FR', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const handleBackup = () => {\n    try {\n      exportData();\n      toast({\n        title: \"Sauvegarde créée\",\n        description: \"Les données ont été exportées avec succès\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erreur de sauvegarde\",\n        description: \"Impossible de créer la sauvegarde\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const moduleInfo = moduleLabels[activeModule] || { title: \"Module\", description: \"Description\" };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\" data-testid=\"top-bar\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-xl font-semibold text-ms-gray-dark\" data-testid=\"page-title\">\n            {moduleInfo.title}\n          </h2>\n          <p className=\"text-sm text-ms-gray\" data-testid=\"page-description\">\n            {moduleInfo.description}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button \n            onClick={handleBackup}\n            className=\"btn-ms-blue flex items-center space-x-2\"\n            data-testid=\"button-backup\"\n          >\n            <i className=\"fas fa-download\"></i>\n            <span>Sauvegarde</span>\n          </Button>\n          <div className=\"text-sm text-ms-gray\" data-testid=\"current-date\">\n            <span>{currentDate}</span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2779},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useLocalStorage.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T) {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T | ((val: T) => T)) => {\n    try {\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\n      setStoredValue(valueToStore);\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue] as const;\n}\n\nexport function useLocalStorageBackup() {\n  const exportData = () => {\n    const data = {\n      timestamp: new Date().toISOString(),\n      articles: localStorage.getItem('articles') || '[]',\n      suppliers: localStorage.getItem('suppliers') || '[]',\n      requestors: localStorage.getItem('requestors') || '[]',\n      purchaseRequests: localStorage.getItem('purchaseRequests') || '[]',\n      receptions: localStorage.getItem('receptions') || '[]',\n      outbounds: localStorage.getItem('outbounds') || '[]',\n      stockMovements: localStorage.getItem('stockMovements') || '[]',\n    };\n    \n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `stock-backup-${new Date().toISOString().slice(0, 10)}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const importData = (file: File) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = JSON.parse(e.target?.result as string);\n          \n          // Restore data to localStorage\n          Object.entries(data).forEach(([key, value]) => {\n            if (key !== 'timestamp' && typeof value === 'string') {\n              localStorage.setItem(key, value);\n            }\n          });\n          \n          resolve(data);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      reader.onerror = () => reject(reader.error);\n      reader.readAsText(file);\n    });\n  };\n\n  return { exportData, importData };\n}\n","size_bytes":2557},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Articles.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport ArticleForm from \"@/components/ArticleForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Article } from \"@shared/schema\";\n\nexport default function Articles() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingArticle, setEditingArticle] = useState<Article | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [stockFilter, setStockFilter] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: articles = [], isLoading } = useQuery<Article[]>({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/articles/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Article supprimé\",\n        description: \"L'article a été supprimé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer l'article\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredArticles = articles.filter(article => {\n    const matchesSearch = !search || \n      article.codeArticle.toLowerCase().includes(search.toLowerCase()) ||\n      article.designation.toLowerCase().includes(search.toLowerCase());\n    \n    const matchesCategory = !categoryFilter || article.categorie === categoryFilter;\n    \n    const matchesStock = !stockFilter || \n      (stockFilter === \"low\" && article.stockActuel <= (article.seuilMinimum || 10)) ||\n      (stockFilter === \"normal\" && article.stockActuel > (article.seuilMinimum || 10));\n    \n    return matchesSearch && matchesCategory && matchesStock;\n  });\n\n  const categories = [...new Set(articles.map(a => a.categorie))];\n\n  const handleEdit = (article: Article) => {\n    setEditingArticle(article);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer cet article ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingArticle(null);\n  };\n\n  const getStockStatus = (article: Article) => {\n    if (article.stockActuel <= (article.seuilMinimum || 10)) {\n      return { color: \"text-ms-red\", icon: \"fas fa-exclamation-triangle\" };\n    }\n    return { color: \"text-ms-green\", icon: \"fas fa-check-circle\" };\n  };\n\n  const getSupplierName = (supplierId: string | null) => {\n    if (!supplierId) return \"Non défini\";\n    const supplier = suppliers.find((s: any) => s.id === supplierId);\n    return supplier?.nom || \"Inconnu\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"articles-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Gestion des Articles</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-article\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouvel Article</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n              <Input \n                type=\"text\" \n                placeholder=\"Code, désignation...\" \n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Catégorie</label>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger data-testid=\"select-category\">\n                  <SelectValue placeholder=\"Toutes les catégories\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Toutes les catégories</SelectItem>\n                  {categories.map(category => (\n                    <SelectItem key={category} value={category}>{category}</SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Stock</label>\n              <Select value={stockFilter} onValueChange={setStockFilter}>\n                <SelectTrigger data-testid=\"select-stock\">\n                  <SelectValue placeholder=\"Tous\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Tous</SelectItem>\n                  <SelectItem value=\"low\">Stock bas</SelectItem>\n                  <SelectItem value=\"normal\">Stock normal</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Actions</label>\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => {\n                  setSearch(\"\");\n                  setCategoryFilter(\"\");\n                  setStockFilter(\"\");\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Effacer filtres\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Articles Table */}\n        <CardContent className=\"p-0\">\n          {filteredArticles.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Code Article</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Désignation</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Catégorie</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Stock</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Prix Unitaire</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Fournisseur</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredArticles.map((article) => {\n                    const stockStatus = getStockStatus(article);\n                    return (\n                      <tr key={article.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                        <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{article.codeArticle}</td>\n                        <td className=\"p-4 text-sm text-ms-gray-dark\">{article.designation}</td>\n                        <td className=\"p-4 text-sm text-ms-gray\">{article.categorie}</td>\n                        <td className=\"p-4 text-sm\">\n                          <div className=\"flex items-center space-x-2\">\n                            <i className={`${stockStatus.icon} ${stockStatus.color}`}></i>\n                            <span className={`font-medium ${stockStatus.color}`}>\n                              {article.stockActuel} {article.unite}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"p-4 text-sm text-ms-gray\">{article.prixUnitaire ? `€${article.prixUnitaire}` : '-'}</td>\n                        <td className=\"p-4 text-sm text-ms-gray\">{getSupplierName(article.fournisseurId)}</td>\n                        <td className=\"p-4\">\n                          <div className=\"flex space-x-2\">\n                            <Button \n                              size=\"sm\" \n                              variant=\"ghost\"\n                              onClick={() => handleEdit(article)}\n                              data-testid={`button-edit-${article.id}`}\n                            >\n                              <i className=\"fas fa-edit text-ms-blue\"></i>\n                            </Button>\n                            <Button \n                              size=\"sm\" \n                              variant=\"ghost\"\n                              onClick={() => handleDelete(article.id)}\n                              data-testid={`button-delete-${article.id}`}\n                            >\n                              <i className=\"fas fa-trash text-ms-red\"></i>\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-boxes text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucun article trouvé</p>\n              <p className=\"text-sm\">Commencez par ajouter votre premier article</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-article\"\n              >\n                Ajouter un article\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <ArticleForm \n          article={editingArticle}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":10928},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\ninterface DashboardStats {\n  totalArticles: number;\n  lowStock: number;\n  pendingRequests: number;\n  stockValue: number;\n}\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const { data: lowStockArticles = [] } = useQuery({\n    queryKey: [\"/api/articles/low-stock\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('fr-FR', {\n      style: 'currency',\n      currency: 'EUR'\n    }).format(value);\n  };\n\n  return (\n    <div className=\"space-y-8\" data-testid=\"dashboard\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        <Card className=\"card-hover transition-smooth\" data-testid=\"card-total-articles\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Total Articles</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">{stats?.totalArticles || 0}</p>\n                <p className=\"text-xs text-ms-green mt-1\">\n                  <i className=\"fas fa-arrow-up\"></i>\n                  <span>Articles référencés</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-boxes text-ms-blue text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\" data-testid=\"card-low-stock\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Stock Bas</p>\n                <p className=\"text-2xl font-bold text-ms-red\">{stats?.lowStock || 0}</p>\n                <p className=\"text-xs text-ms-red mt-1\">\n                  <i className=\"fas fa-exclamation-triangle\"></i>\n                  <span>Attention requise</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-exclamation-triangle text-ms-red text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\" data-testid=\"card-pending-requests\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Demandes en Cours</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">{stats?.pendingRequests || 0}</p>\n                <p className=\"text-xs text-ms-amber mt-1\">\n                  <i className=\"fas fa-clock\"></i>\n                  <span>En attente</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-shopping-cart text-ms-amber text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\" data-testid=\"card-stock-value\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Valeur Stock</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">\n                  {formatCurrency(stats?.stockValue || 0)}\n                </p>\n                <p className=\"text-xs text-ms-green mt-1\">\n                  <i className=\"fas fa-arrow-up\"></i>\n                  <span>Valeur totale</span>\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-euro-sign text-ms-green text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Quick Actions */}\n      <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-6\">\n        {/* Quick Actions */}\n        <div>\n          <Card>\n            <div className=\"p-6 border-b border-gray-200\">\n              <h3 className=\"text-lg font-semibold text-ms-gray-dark\">Actions Rapides</h3>\n            </div>\n            <CardContent className=\"p-6 space-y-3\">\n              <Link href=\"/articles\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start p-4 h-auto bg-ms-gray-light hover:bg-gray-200\"\n                  data-testid=\"quick-action-articles\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-ms-blue rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-plus text-white text-sm\"></i>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"text-sm font-medium text-ms-gray-dark\">Ajouter Article</p>\n                      <p className=\"text-xs text-ms-gray\">Nouveau produit</p>\n                    </div>\n                  </div>\n                </Button>\n              </Link>\n\n              <Link href=\"/purchase-requests\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start p-4 h-auto bg-ms-gray-light hover:bg-gray-200\"\n                  data-testid=\"quick-action-purchase-request\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-ms-amber rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-shopping-cart text-white text-sm\"></i>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"text-sm font-medium text-ms-gray-dark\">Demande d'Achat</p>\n                      <p className=\"text-xs text-ms-gray\">Nouvelle demande</p>\n                    </div>\n                  </div>\n                </Button>\n              </Link>\n\n              <Link href=\"/reception\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start p-4 h-auto bg-ms-gray-light hover:bg-gray-200\"\n                  data-testid=\"quick-action-reception\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-ms-green rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-truck text-white text-sm\"></i>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"text-sm font-medium text-ms-gray-dark\">Réception</p>\n                      <p className=\"text-xs text-ms-gray\">Enregistrer livraison</p>\n                    </div>\n                  </div>\n                </Button>\n              </Link>\n\n              <Link href=\"/reports\">\n                <Button \n                  variant=\"ghost\" \n                  className=\"w-full justify-start p-4 h-auto bg-ms-gray-light hover:bg-gray-200\"\n                  data-testid=\"quick-action-export\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-ms-light-blue rounded-lg flex items-center justify-center\">\n                      <i className=\"fas fa-file-export text-white text-sm\"></i>\n                    </div>\n                    <div className=\"text-left\">\n                      <p className=\"text-sm font-medium text-ms-gray-dark\">Export Données</p>\n                      <p className=\"text-xs text-ms-gray\">Excel/PDF</p>\n                    </div>\n                  </div>\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stock Alerts */}\n        <div className=\"xl:col-span-2\">\n          <Card>\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-semibold text-ms-gray-dark\">Alertes Stock Bas</h3>\n                {stats?.lowStock && stats.lowStock > 0 && (\n                  <span className=\"bg-ms-red text-white text-xs px-2 py-1 rounded-full\">\n                    {stats.lowStock} articles\n                  </span>\n                )}\n              </div>\n            </div>\n            <CardContent className=\"p-0\">\n              {lowStockArticles.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-ms-gray-light\">\n                      <tr>\n                        <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Code Article</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Désignation</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Stock Actuel</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Seuil Min.</th>\n                        <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {lowStockArticles.slice(0, 5).map((article: any) => (\n                        <tr key={article.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                          <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{article.codeArticle}</td>\n                          <td className=\"p-4 text-sm text-ms-gray-dark\">{article.designation}</td>\n                          <td className=\"p-4 text-sm font-medium text-ms-red\">{article.stockActuel}</td>\n                          <td className=\"p-4 text-sm text-ms-gray\">{article.seuilMinimum}</td>\n                          <td className=\"p-4\">\n                            <Button \n                              size=\"sm\" \n                              className=\"btn-ms-blue text-xs\"\n                              data-testid={`button-order-${article.id}`}\n                            >\n                              Commander\n                            </Button>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"p-8 text-center text-ms-gray\">\n                  <i className=\"fas fa-check-circle text-ms-green text-3xl mb-2\"></i>\n                  <p>Aucun article en stock bas</p>\n                  <p className=\"text-sm\">Tous les stocks sont à niveau acceptable</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11773},"client/src/pages/Outbound.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport OutboundForm from \"@/components/OutboundForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Outbound } from \"@shared/schema\";\n\nexport default function OutboundPage() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingOutbound, setEditingOutbound] = useState<Outbound | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: outbounds = [], isLoading } = useQuery<Outbound[]>({\n    queryKey: [\"/api/outbounds\"],\n  });\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: requestors = [] } = useQuery({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/outbounds/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/outbounds\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Sortie supprimée\",\n        description: \"La sortie de stock a été supprimée avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la sortie\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredOutbounds = outbounds.filter(outbound => {\n    const article = articles.find((a: any) => a.id === outbound.articleId);\n    const requestor = requestors.find((r: any) => r.id === outbound.requestorId);\n    \n    return !search || \n      (article && (article.codeArticle.toLowerCase().includes(search.toLowerCase()) ||\n                   article.designation.toLowerCase().includes(search.toLowerCase()))) ||\n      (requestor && `${requestor.prenom} ${requestor.nom}`.toLowerCase().includes(search.toLowerCase())) ||\n      outbound.motifSortie.toLowerCase().includes(search.toLowerCase());\n  });\n\n  const getArticleName = (articleId: string) => {\n    const article = articles.find((a: any) => a.id === articleId);\n    return article ? `${article.codeArticle} - ${article.designation}` : \"Article inconnu\";\n  };\n\n  const getRequestorName = (requestorId: string) => {\n    const requestor = requestors.find((r: any) => r.id === requestorId);\n    return requestor ? `${requestor.prenom} ${requestor.nom}` : \"Demandeur inconnu\";\n  };\n\n  const handleEdit = (outbound: Outbound) => {\n    setEditingOutbound(outbound);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer cette sortie ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingOutbound(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"outbound-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Sortie de Stock</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-outbound\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouvelle Sortie</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"max-w-md\">\n            <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n            <Input \n              type=\"text\" \n              placeholder=\"Article, demandeur, motif...\" \n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Outbounds Table */}\n        <CardContent className=\"p-0\">\n          {filteredOutbounds.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Date Sortie</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Demandeur</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Article</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Quantité</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Motif</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Observations</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredOutbounds.map((outbound) => (\n                    <tr key={outbound.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">\n                        {new Date(outbound.dateSortie).toLocaleDateString('fr-FR')}\n                      </td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getRequestorName(outbound.requestorId)}</td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getArticleName(outbound.articleId)}</td>\n                      <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{outbound.quantiteSortie}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{outbound.motifSortie}</td>\n                      <td className=\"p-4 text-sm text-ms-gray max-w-xs truncate\" title={outbound.observations || \"\"}>\n                        {outbound.observations || '-'}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEdit(outbound)}\n                            data-testid={`button-edit-${outbound.id}`}\n                          >\n                            <i className=\"fas fa-edit text-ms-blue\"></i>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDelete(outbound.id)}\n                            data-testid={`button-delete-${outbound.id}`}\n                          >\n                            <i className=\"fas fa-trash text-ms-red\"></i>\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-sign-out-alt text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucune sortie trouvée</p>\n              <p className=\"text-sm\">Commencez par enregistrer une nouvelle sortie de stock</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-outbound\"\n              >\n                Nouvelle sortie\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <OutboundForm \n          outbound={editingOutbound}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":8480},"client/src/pages/PurchaseRequests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport PurchaseRequestForm from \"@/components/PurchaseRequestForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { PurchaseRequest } from \"@shared/schema\";\n\nexport default function PurchaseRequests() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingRequest, setEditingRequest] = useState<PurchaseRequest | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: purchaseRequests = [], isLoading } = useQuery<PurchaseRequest[]>({\n    queryKey: [\"/api/purchase-requests\"],\n  });\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: requestors = [] } = useQuery({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ id, statut }: { id: string; statut: string }) => \n      apiRequest(\"PUT\", `/api/purchase-requests/${id}`, { statut }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Statut mis à jour\",\n        description: \"Le statut de la demande a été mis à jour\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le statut\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/purchase-requests/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/purchase-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Demande supprimée\",\n        description: \"La demande d'achat a été supprimée avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la demande\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRequests = purchaseRequests.filter(request => {\n    const article = articles.find((a: any) => a.id === request.articleId);\n    const requestor = requestors.find((r: any) => r.id === request.requestorId);\n    \n    const matchesSearch = !search || \n      (article && article.designation.toLowerCase().includes(search.toLowerCase())) ||\n      (requestor && `${requestor.prenom} ${requestor.nom}`.toLowerCase().includes(search.toLowerCase()));\n    \n    const matchesStatus = !statusFilter || request.statut === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const getArticleName = (articleId: string) => {\n    const article = articles.find((a: any) => a.id === articleId);\n    return article ? `${article.codeArticle} - ${article.designation}` : \"Article inconnu\";\n  };\n\n  const getRequestorName = (requestorId: string) => {\n    const requestor = requestors.find((r: any) => r.id === requestorId);\n    return requestor ? `${requestor.prenom} ${requestor.nom}` : \"Demandeur inconnu\";\n  };\n\n  const getSupplierName = (supplierId: string | null) => {\n    if (!supplierId) return \"-\";\n    const supplier = suppliers.find((s: any) => s.id === supplierId);\n    return supplier?.nom || \"Fournisseur inconnu\";\n  };\n\n  const getStatusBadge = (statut: string) => {\n    const statusConfig = {\n      en_attente: { color: \"bg-ms-amber text-white\", label: \"En attente\" },\n      approuve: { color: \"bg-ms-green text-white\", label: \"Approuvé\" },\n      refuse: { color: \"bg-ms-red text-white\", label: \"Refusé\" },\n      commande: { color: \"bg-ms-blue text-white\", label: \"Commandé\" },\n    };\n    \n    const config = statusConfig[statut as keyof typeof statusConfig] || statusConfig.en_attente;\n    return (\n      <Badge className={config.color}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleEdit = (request: PurchaseRequest) => {\n    setEditingRequest(request);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer cette demande ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleStatusChange = (id: string, newStatus: string) => {\n    updateStatusMutation.mutate({ id, statut: newStatus });\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingRequest(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"purchase-requests-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Demandes d'Achat</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-request\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouvelle Demande</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n              <Input \n                type=\"text\" \n                placeholder=\"Article, demandeur...\" \n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Statut</label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-status\">\n                  <SelectValue placeholder=\"Tous les statuts\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"\">Tous les statuts</SelectItem>\n                  <SelectItem value=\"en_attente\">En attente</SelectItem>\n                  <SelectItem value=\"approuve\">Approuvé</SelectItem>\n                  <SelectItem value=\"refuse\">Refusé</SelectItem>\n                  <SelectItem value=\"commande\">Commandé</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Actions</label>\n              <Button \n                variant=\"outline\" \n                className=\"w-full\"\n                onClick={() => {\n                  setSearch(\"\");\n                  setStatusFilter(\"\");\n                }}\n                data-testid=\"button-clear-filters\"\n              >\n                Effacer filtres\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Requests Table */}\n        <CardContent className=\"p-0\">\n          {filteredRequests.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Date Demande</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Demandeur</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Article</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Quantité</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Statut</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Fournisseur</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredRequests.map((request) => (\n                    <tr key={request.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">\n                        {new Date(request.dateDemande).toLocaleDateString('fr-FR')}\n                      </td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getRequestorName(request.requestorId)}</td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getArticleName(request.articleId)}</td>\n                      <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{request.quantiteDemandee}</td>\n                      <td className=\"p-4\">{getStatusBadge(request.statut)}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{getSupplierName(request.supplierId)}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Select onValueChange={(value) => handleStatusChange(request.id, value)}>\n                            <SelectTrigger className=\"w-32\">\n                              <SelectValue placeholder=\"Statut\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"en_attente\">En attente</SelectItem>\n                              <SelectItem value=\"approuve\">Approuvé</SelectItem>\n                              <SelectItem value=\"refuse\">Refusé</SelectItem>\n                              <SelectItem value=\"commande\">Commandé</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEdit(request)}\n                            data-testid={`button-edit-${request.id}`}\n                          >\n                            <i className=\"fas fa-edit text-ms-blue\"></i>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDelete(request.id)}\n                            data-testid={`button-delete-${request.id}`}\n                          >\n                            <i className=\"fas fa-trash text-ms-red\"></i>\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-shopping-cart text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucune demande trouvée</p>\n              <p className=\"text-sm\">Commencez par créer une nouvelle demande d'achat</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-request\"\n              >\n                Nouvelle demande\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <PurchaseRequestForm \n          request={editingRequest}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":12352},"client/src/pages/Reception.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport ReceptionForm from \"@/components/ReceptionForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Reception } from \"@shared/schema\";\n\nexport default function ReceptionPage() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingReception, setEditingReception] = useState<Reception | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: receptions = [], isLoading } = useQuery<Reception[]>({\n    queryKey: [\"/api/receptions\"],\n  });\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/receptions/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/receptions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/articles\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Réception supprimée\",\n        description: \"La réception a été supprimée avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer la réception\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredReceptions = receptions.filter(reception => {\n    const article = articles.find((a: any) => a.id === reception.articleId);\n    const supplier = suppliers.find((s: any) => s.id === reception.supplierId);\n    \n    return !search || \n      (article && (article.codeArticle.toLowerCase().includes(search.toLowerCase()) ||\n                   article.designation.toLowerCase().includes(search.toLowerCase()))) ||\n      (supplier && supplier.nom.toLowerCase().includes(search.toLowerCase())) ||\n      (reception.numeroBonLivraison && reception.numeroBonLivraison.toLowerCase().includes(search.toLowerCase()));\n  });\n\n  const getArticleName = (articleId: string) => {\n    const article = articles.find((a: any) => a.id === articleId);\n    return article ? `${article.codeArticle} - ${article.designation}` : \"Article inconnu\";\n  };\n\n  const getSupplierName = (supplierId: string) => {\n    const supplier = suppliers.find((s: any) => s.id === supplierId);\n    return supplier?.nom || \"Fournisseur inconnu\";\n  };\n\n  const handleEdit = (reception: Reception) => {\n    setEditingReception(reception);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer cette réception ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingReception(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"reception-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Réception de Marchandises</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-reception\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouvelle Réception</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"max-w-md\">\n            <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n            <Input \n              type=\"text\" \n              placeholder=\"Article, fournisseur, NBL...\" \n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Receptions Table */}\n        <CardContent className=\"p-0\">\n          {filteredReceptions.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Date Réception</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Fournisseur</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Article</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Quantité</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Prix Unitaire</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">NBL</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredReceptions.map((reception) => (\n                    <tr key={reception.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">\n                        {new Date(reception.dateReception).toLocaleDateString('fr-FR')}\n                      </td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getSupplierName(reception.supplierId)}</td>\n                      <td className=\"p-4 text-sm text-ms-gray-dark\">{getArticleName(reception.articleId)}</td>\n                      <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{reception.quantiteRecue}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">\n                        {reception.prixUnitaire ? `€${reception.prixUnitaire}` : '-'}\n                      </td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{reception.numeroBonLivraison || '-'}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEdit(reception)}\n                            data-testid={`button-edit-${reception.id}`}\n                          >\n                            <i className=\"fas fa-edit text-ms-blue\"></i>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDelete(reception.id)}\n                            data-testid={`button-delete-${reception.id}`}\n                          >\n                            <i className=\"fas fa-trash text-ms-red\"></i>\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-truck text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucune réception trouvée</p>\n              <p className=\"text-sm\">Commencez par enregistrer une nouvelle réception</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-reception\"\n              >\n                Nouvelle réception\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <ReceptionForm \n          reception={editingReception}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":8509},"client/src/pages/Reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useLocalStorageBackup } from \"@/hooks/useLocalStorage\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Reports() {\n  const [reportType, setReportType] = useState(\"stock\");\n  const [exportFormat, setExportFormat] = useState(\"csv\");\n  const { exportData } = useLocalStorageBackup();\n  const { toast } = useToast();\n\n  const { data: articles = [] } = useQuery({\n    queryKey: [\"/api/articles\"],\n  });\n\n  const { data: stockMovements = [] } = useQuery({\n    queryKey: [\"/api/stock-movements\"],\n  });\n\n  const { data: purchaseRequests = [] } = useQuery({\n    queryKey: [\"/api/purchase-requests\"],\n  });\n\n  const { data: receptions = [] } = useQuery({\n    queryKey: [\"/api/receptions\"],\n  });\n\n  const { data: outbounds = [] } = useQuery({\n    queryKey: [\"/api/outbounds\"],\n  });\n\n  const { data: suppliers = [] } = useQuery({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const { data: requestors = [] } = useQuery({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const { data: dashboardStats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const exportToCSV = (data: any[], filename: string) => {\n    if (data.length === 0) {\n      toast({\n        title: \"Aucune donnée\",\n        description: \"Aucune donnée à exporter\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const headers = Object.keys(data[0]);\n    const csvContent = [\n      headers.join(','),\n      ...data.map(row => headers.map(header => \n        JSON.stringify(row[header] || '')\n      ).join(','))\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${filename}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n  };\n\n  const generateStockReport = () => {\n    const stockData = articles.map((article: any) => ({\n      'Code Article': article.codeArticle,\n      'Désignation': article.designation,\n      'Catégorie': article.categorie,\n      'Marque': article.marque || '',\n      'Stock Actuel': article.stockActuel,\n      'Unité': article.unite,\n      'Prix Unitaire': article.prixUnitaire || '',\n      'Seuil Minimum': article.seuilMinimum || '',\n      'Valeur Stock': article.prixUnitaire ? (parseFloat(article.prixUnitaire) * article.stockActuel).toFixed(2) : '',\n    }));\n\n    return stockData;\n  };\n\n  const generateMovementsReport = () => {\n    const movementsData = stockMovements.map((movement: any) => {\n      const article = articles.find((a: any) => a.id === movement.articleId);\n      return {\n        'Date': new Date(movement.dateMovement).toLocaleDateString('fr-FR'),\n        'Article': article ? `${article.codeArticle} - ${article.designation}` : 'Inconnu',\n        'Type': movement.type === 'entree' ? 'Entrée' : 'Sortie',\n        'Quantité': movement.quantite,\n        'Stock Avant': movement.quantiteAvant,\n        'Stock Après': movement.quantiteApres,\n        'Description': movement.description || '',\n      };\n    });\n\n    return movementsData.sort((a, b) => new Date(b.Date).getTime() - new Date(a.Date).getTime());\n  };\n\n  const generateSuppliersReport = () => {\n    const suppliersData = suppliers.map((supplier: any) => ({\n      'Nom': supplier.nom,\n      'Contact': supplier.contact || '',\n      'Téléphone': supplier.telephone || '',\n      'Email': supplier.email || '',\n      'Adresse': supplier.adresse || '',\n      'Conditions Paiement': supplier.conditionsPaiement || '',\n      'Délai Livraison': supplier.delaiLivraison ? `${supplier.delaiLivraison} jours` : '',\n    }));\n\n    return suppliersData;\n  };\n\n  const generateRequestorsReport = () => {\n    const requestorsData = requestors.map((requestor: any) => ({\n      'Nom': requestor.nom,\n      'Prénom': requestor.prenom,\n      'Département': requestor.departement,\n      'Poste': requestor.poste || '',\n      'Email': requestor.email || '',\n      'Téléphone': requestor.telephone || '',\n    }));\n\n    return requestorsData;\n  };\n\n  const handleExport = () => {\n    let data: any[] = [];\n    let filename = '';\n\n    switch (reportType) {\n      case 'stock':\n        data = generateStockReport();\n        filename = 'rapport-stock';\n        break;\n      case 'movements':\n        data = generateMovementsReport();\n        filename = 'rapport-mouvements';\n        break;\n      case 'suppliers':\n        data = generateSuppliersReport();\n        filename = 'rapport-fournisseurs';\n        break;\n      case 'requestors':\n        data = generateRequestorsReport();\n        filename = 'rapport-demandeurs';\n        break;\n      default:\n        toast({\n          title: \"Erreur\",\n          description: \"Type de rapport non valide\",\n          variant: \"destructive\",\n        });\n        return;\n    }\n\n    if (exportFormat === 'csv') {\n      exportToCSV(data, filename);\n      toast({\n        title: \"Export réussi\",\n        description: `Le rapport ${reportType} a été exporté en CSV`,\n      });\n    }\n  };\n\n  const handleBackup = () => {\n    try {\n      exportData();\n      toast({\n        title: \"Sauvegarde créée\",\n        description: \"Toutes les données ont été sauvegardées\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Erreur de sauvegarde\",\n        description: \"Impossible de créer la sauvegarde\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const lowStockArticles = articles.filter((article: any) => \n    article.stockActuel <= (article.seuilMinimum || 10)\n  );\n\n  const totalStockValue = articles.reduce((total: number, article: any) => {\n    const price = parseFloat(article.prixUnitaire || \"0\");\n    return total + (price * article.stockActuel);\n  }, 0);\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"reports-page\">\n      {/* Stats Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6\">\n        <Card className=\"card-hover transition-smooth\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Total Articles</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">{articles.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-boxes text-ms-blue text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Stock Bas</p>\n                <p className=\"text-2xl font-bold text-ms-red\">{lowStockArticles.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-red-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-exclamation-triangle text-ms-red text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Fournisseurs</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">{suppliers.length}</p>\n              </div>\n              <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-building text-ms-green text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"card-hover transition-smooth\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-ms-gray\">Valeur Stock</p>\n                <p className=\"text-2xl font-bold text-ms-gray-dark\">\n                  {new Intl.NumberFormat('fr-FR', {\n                    style: 'currency',\n                    currency: 'EUR'\n                  }).format(totalStockValue)}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-amber-100 rounded-xl flex items-center justify-center\">\n                <i className=\"fas fa-euro-sign text-ms-amber text-xl\"></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Export Section */}\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Export de Données</h3>\n        </div>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Type de rapport</label>\n              <Select value={reportType} onValueChange={setReportType}>\n                <SelectTrigger data-testid=\"select-report-type\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"stock\">État des Stocks</SelectItem>\n                  <SelectItem value=\"movements\">Mouvements de Stock</SelectItem>\n                  <SelectItem value=\"suppliers\">Liste des Fournisseurs</SelectItem>\n                  <SelectItem value=\"requestors\">Liste des Demandeurs</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Format</label>\n              <Select value={exportFormat} onValueChange={setExportFormat}>\n                <SelectTrigger data-testid=\"select-export-format\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"csv\">CSV (Excel)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Action</label>\n              <Button \n                onClick={handleExport}\n                className=\"w-full btn-ms-blue\"\n                data-testid=\"button-export\"\n              >\n                <i className=\"fas fa-download mr-2\"></i>\n                Exporter\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Backup Section */}\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Sauvegarde et Restauration</h3>\n        </div>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div>\n              <h4 className=\"font-medium text-ms-gray-dark mb-3\">Sauvegarde Complète</h4>\n              <p className=\"text-sm text-ms-gray mb-4\">\n                Exportez toutes vos données dans un fichier de sauvegarde JSON.\n              </p>\n              <Button \n                onClick={handleBackup}\n                className=\"btn-ms-green\"\n                data-testid=\"button-backup\"\n              >\n                <i className=\"fas fa-download mr-2\"></i>\n                Créer une sauvegarde\n              </Button>\n            </div>\n\n            <div>\n              <h4 className=\"font-medium text-ms-gray-dark mb-3\">Informations</h4>\n              <div className=\"space-y-2 text-sm text-ms-gray\">\n                <p>• Les données sont stockées localement dans votre navigateur</p>\n                <p>• Effectuez des sauvegardes régulières</p>\n                <p>• Les rapports incluent toutes les données actuelles</p>\n                <p>• Format CSV compatible avec Excel</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Statistiques Rapides</h3>\n        </div>\n        <CardContent className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-ms-blue mb-2\">{stockMovements.length}</div>\n              <div className=\"text-sm text-ms-gray\">Mouvements de stock</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-ms-amber mb-2\">{purchaseRequests.length}</div>\n              <div className=\"text-sm text-ms-gray\">Demandes d'achat</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-ms-green mb-2\">{receptions.length + outbounds.length}</div>\n              <div className=\"text-sm text-ms-gray\">Transactions totales</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13559},"client/src/pages/Requestors.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport RequestorForm from \"@/components/RequestorForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Requestor } from \"@shared/schema\";\n\nexport default function Requestors() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingRequestor, setEditingRequestor] = useState<Requestor | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: requestors = [], isLoading } = useQuery<Requestor[]>({\n    queryKey: [\"/api/requestors\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/requestors/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/requestors\"] });\n      toast({\n        title: \"Demandeur supprimé\",\n        description: \"Le demandeur a été supprimé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le demandeur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRequestors = requestors.filter(requestor => \n    !search || \n    requestor.nom.toLowerCase().includes(search.toLowerCase()) ||\n    requestor.prenom.toLowerCase().includes(search.toLowerCase()) ||\n    requestor.departement.toLowerCase().includes(search.toLowerCase())\n  );\n\n  const handleEdit = (requestor: Requestor) => {\n    setEditingRequestor(requestor);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce demandeur ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingRequestor(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"requestors-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Gestion des Demandeurs</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-requestor\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouveau Demandeur</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"max-w-md\">\n            <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n            <Input \n              type=\"text\" \n              placeholder=\"Nom, prénom, département...\" \n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Requestors Table */}\n        <CardContent className=\"p-0\">\n          {filteredRequestors.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Nom</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Prénom</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Département</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Poste</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Email</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Téléphone</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredRequestors.map((requestor) => (\n                    <tr key={requestor.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{requestor.nom}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{requestor.prenom}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{requestor.departement}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{requestor.poste || \"-\"}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{requestor.email || \"-\"}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{requestor.telephone || \"-\"}</td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEdit(requestor)}\n                            data-testid={`button-edit-${requestor.id}`}\n                          >\n                            <i className=\"fas fa-edit text-ms-blue\"></i>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDelete(requestor.id)}\n                            data-testid={`button-delete-${requestor.id}`}\n                          >\n                            <i className=\"fas fa-trash text-ms-red\"></i>\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-users text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucun demandeur trouvé</p>\n              <p className=\"text-sm\">Commencez par ajouter votre premier demandeur</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-requestor\"\n              >\n                Ajouter un demandeur\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <RequestorForm \n          requestor={editingRequestor}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7179},"client/src/pages/Suppliers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport SupplierForm from \"@/components/SupplierForm\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Supplier } from \"@shared/schema\";\n\nexport default function Suppliers() {\n  const [showForm, setShowForm] = useState(false);\n  const [editingSupplier, setEditingSupplier] = useState<Supplier | null>(null);\n  const [search, setSearch] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: suppliers = [], isLoading } = useQuery<Supplier[]>({\n    queryKey: [\"/api/suppliers\"],\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/suppliers/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/suppliers\"] });\n      toast({\n        title: \"Fournisseur supprimé\",\n        description: \"Le fournisseur a été supprimé avec succès\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de supprimer le fournisseur\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredSuppliers = suppliers.filter(supplier => \n    !search || \n    supplier.nom.toLowerCase().includes(search.toLowerCase()) ||\n    (supplier.contact && supplier.contact.toLowerCase().includes(search.toLowerCase()))\n  );\n\n  const handleEdit = (supplier: Supplier) => {\n    setEditingSupplier(supplier);\n    setShowForm(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Êtes-vous sûr de vouloir supprimer ce fournisseur ?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingSupplier(null);\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"suppliers-page\">\n      <Card>\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-semibold text-ms-gray-dark\">Gestion des Fournisseurs</h3>\n            <Button \n              onClick={() => setShowForm(true)}\n              className=\"btn-ms-blue flex items-center space-x-2\"\n              data-testid=\"button-add-supplier\"\n            >\n              <i className=\"fas fa-plus\"></i>\n              <span>Nouveau Fournisseur</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"p-6 border-b border-gray-200\">\n          <div className=\"max-w-md\">\n            <label className=\"block text-sm font-medium text-ms-gray-dark mb-2\">Rechercher</label>\n            <Input \n              type=\"text\" \n              placeholder=\"Nom, contact...\" \n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              data-testid=\"input-search\"\n            />\n          </div>\n        </div>\n\n        {/* Suppliers Table */}\n        <CardContent className=\"p-0\">\n          {filteredSuppliers.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead className=\"bg-ms-gray-light\">\n                  <tr>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Nom</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Contact</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Téléphone</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Email</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Délai Livraison</th>\n                    <th className=\"text-left p-4 text-sm font-medium text-ms-gray-dark\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredSuppliers.map((supplier) => (\n                    <tr key={supplier.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"p-4 text-sm font-medium text-ms-gray-dark\">{supplier.nom}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{supplier.contact || \"-\"}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{supplier.telephone || \"-\"}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">{supplier.email || \"-\"}</td>\n                      <td className=\"p-4 text-sm text-ms-gray\">\n                        {supplier.delaiLivraison ? `${supplier.delaiLivraison} jours` : \"-\"}\n                      </td>\n                      <td className=\"p-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleEdit(supplier)}\n                            data-testid={`button-edit-${supplier.id}`}\n                          >\n                            <i className=\"fas fa-edit text-ms-blue\"></i>\n                          </Button>\n                          <Button \n                            size=\"sm\" \n                            variant=\"ghost\"\n                            onClick={() => handleDelete(supplier.id)}\n                            data-testid={`button-delete-${supplier.id}`}\n                          >\n                            <i className=\"fas fa-trash text-ms-red\"></i>\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"p-8 text-center text-ms-gray\" data-testid=\"empty-state\">\n              <i className=\"fas fa-building text-4xl mb-4\"></i>\n              <p className=\"text-lg font-medium\">Aucun fournisseur trouvé</p>\n              <p className=\"text-sm\">Commencez par ajouter votre premier fournisseur</p>\n              <Button \n                onClick={() => setShowForm(true)}\n                className=\"btn-ms-blue mt-4\"\n                data-testid=\"button-add-first-supplier\"\n              >\n                Ajouter un fournisseur\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {showForm && (\n        <SupplierForm \n          supplier={editingSupplier}\n          onClose={handleCloseForm}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":7007},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}